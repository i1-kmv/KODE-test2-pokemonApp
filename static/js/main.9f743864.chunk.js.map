{"version":3,"sources":["pages/PokemonProfile/PokemonProfile.module.css","components/Input/Input.tsx","components/Button/Button.tsx","utils/smsAlert.tsx","api/pokemon-api.ts","app/app-reducer.ts","pages/Login/auth-reducer.tsx","utils/ErrorSnackbar.tsx","pages/PasswordСonfirmation/PasswordСonfirmation.tsx","pages/MainScreen/main-reducer.ts","pages/PokemonProfile/profile-reducer.ts","components/PokemonCard/PokemonCard.tsx","components/Popup/Popup.tsx","components/Pagination/Pagination.tsx","pages/MainScreen/MainScreen.tsx","utils/Loader.tsx","pages/PokemonProfile/PokemonProfile.tsx","pages/Login/Login.tsx","pages/PageNotFound/PageNotFound.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx","components/Pagination/Pagination.module.css","pages/MainScreen/MainScreen.module.css","components/PokemonCard/PokemonCard.module.css","components/Popup/Popup.module.css","pages/PasswordСonfirmation/PasswordConfirmation.module.css","components/Input/Input.module.css","components/Button/Button.module.css","images/go.svg","pages/Login/Login.module.css","pages/PageNotFound/PageNotFound.module.css"],"names":["module","exports","Input","props","className","styles","input_area","title","type","name","formikProps","Button","button","src","go","alt","Alert","elevation","variant","useStyles","makeStyles","theme","root","width","marginTop","spacing","CustomizedSnackbars","React","useState","open","setOpen","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","instance","axios","create","baseURL","pokemonApi","page","types","subtype","get","params","pageSize","id","authApi","data","Promise","res","rej","login","password","code","initialState","error","isInitialized","setAppErrorAC","setAppIsInitializedAC","value","isLoggedIn","isConfirm","setIsLoggedInAC","setAppIsConfirmedAC","logoutTC","dispatch","then","localStorage","setItem","JSON","stringify","ErrorSnackbar","useSelector","state","app","useDispatch","isOpen","PasswordConfirmation","auth","formik","useFormik","initialValues","validate","values","onSubmit","catch","err","to","wrap","handleSubmit","getFieldProps","cards","subtypes","filterTypeValue","filterSubtypeValue","popupMode","popupSrc","totalCount","setTypeFilterAC","setSubtypeFilterAC","setPageAC","fetchCardsTC","getState","a","main","count","headers","profileMode","card","setProfileModeAC","getCardAC","fetchCardTC","PokemonCard","popupHandler","useCallback","popupSrcValue","imageUrl","profileHandler","image","artist","buttons","onClick","Popup","popupCloseHandler","close","Pagination","currentPage","itemsOnPage","totalItems","changePageNumber","pagesCount","Math","ceil","firstPage","lastPage","pages","i","push","classes","pagination","pagination__btn","disabled","pagination__pages","pagination__btn_active","pagination__space","map","pageN","key","MainScreen","profile","useEffect","getItem","pageNumber","Number","toString","finalCards","mainBar","mainContent","selectsBar","onChange","e","newValue","currentTarget","cardsItems","createStyles","display","marginLeft","CircularIndeterminate","CircularProgress","PokemonProfile","logoutHandler","profileBar","profileContent","profileContent__image","imageUrlHiRes","attacks","text","profileContent__description","description__name","bold","description__char","damage","cost","resistances","evolvesFrom","Login","errors","login_wrap","PageNotFound","App","exact","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","filterSupertypeValue","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9f743864.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PokemonProfile_wrap__YuTd7\",\"profileBar\":\"PokemonProfile_profileBar__31kDO\",\"profileContent\":\"PokemonProfile_profileContent__MzQzf\",\"profileContent__image\":\"PokemonProfile_profileContent__image__EalKA\",\"description__name\":\"PokemonProfile_description__name__2rJXe\",\"description__char\":\"PokemonProfile_description__char__24VxC\",\"bold\":\"PokemonProfile_bold__2iywg\",\"profileContent__description\":\"PokemonProfile_profileContent__description__213af\"};","import React from 'react'\r\nimport styles from './Input.module.css'\r\n\r\n\r\n\r\n\r\nexport const Input = (props:PropsType) => {\r\n\r\n    return <label className={styles.input_area}>{props.title}<input type={props.type} name={props.name} {...props.formikProps}/></label>\r\n\r\n}\r\n\r\n\r\n//Types\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    type: string\r\n    name?: string\r\n    formikProps?: object\r\n}\r\n","import React from 'react'\r\nimport styles from './Button.module.css'\r\nimport go from '../../images/go.svg'\r\n\r\n\r\n\r\nexport const Button = () => {\r\n    return (\r\n        <button type={\"submit\"} className={styles.button}><img src={go} alt=\"\"/></button>\r\n    )\r\n}","\r\nimport React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function CustomizedSnackbars() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n\r\n            <Snackbar  anchorOrigin={{ vertical: 'top', horizontal:'center' }} open={open} autoHideDuration={12000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"info\">\r\n                    Your SMS code: 123456\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n    );\r\n}","import axios from 'axios'\r\nimport {FormikErrorType} from \"../pages/Login/Login\"\r\n\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.pokemontcg.io/v1',\r\n})\r\n\r\n\r\nexport const pokemonApi = {\r\n    getCards(page: number, types: string, subtype: string) {\r\n       return instance.get<ResponseCardsType>('/cards', {params: {page, pageSize: 4, types, subtype}})\r\n    },\r\n    getCard(id:string) {\r\n        return instance.get<ResponseCardType>(`/cards/${id}`)\r\n    },\r\n    getTypes(){\r\n        return instance.get<ResponseTypesType>('/types')\r\n    },\r\n    getSubTypes(){\r\n        return instance.get<ResponseSubtypesType>('/subtypes')\r\n    }\r\n}\r\n\r\n\r\n//Created a fake IP to simulate post requests\r\n\r\n\r\nexport const authApi = {\r\n    //request to send to thunk\r\n    login_mock(data: FormikErrorType) {\r\n        return new Promise((res, rej) => {\r\n            if (data.login === 'KODE' && data.password === '123456') {\r\n                res(true)\r\n            } else {\r\n                rej('Incorrect login or password')\r\n            }\r\n        })\r\n    },\r\n    //request to send to thunk\r\n    confirm_mock(data: FormikErrorType) {\r\n        return new Promise((res, rej) => {\r\n            if (data.code === '123456') {\r\n                res(true)\r\n            } else {\r\n                rej('Incorrect code')\r\n            }\r\n        })\r\n    },\r\n    //request to send to thunk\r\n    logout__mock() {\r\n        return new Promise((res, rej) => {\r\n            res(true)\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//Types\r\n\r\n\r\ntype ResponseCardsType = {\r\n    cards: Array<CardType>\r\n}\r\n\r\ntype ResponseCardType = {\r\n    card: CardType\r\n}\r\n\r\ntype ResponseTypesType = {\r\n    types: Array<string>\r\n}\r\n\r\ntype ResponseSubtypesType = {\r\n    subtypes: Array<string>\r\n}\r\n\r\nexport interface CardType  {\r\n    ability?: IAbility;\r\n    artist: string;\r\n    attacks: IAttack[];\r\n    convertedRetreatCost?: number;\r\n    evolvesFrom?: string;\r\n    hp?: string;\r\n    id: string;\r\n    imageUrl: string;\r\n    imageUrlHiRes?: string;\r\n    name?: string;\r\n    nationalPokedexNumber?: number;\r\n    number?: string;\r\n    rarity?: string;\r\n    retreatCost?: string[];\r\n    series?: string;\r\n    set?: string;\r\n    setCode?: string;\r\n    subtype: string;\r\n    supertype?: string;\r\n    text: string[];\r\n    types: string[];\r\n    weaknesses?: IWeakness[];\r\n    resistances: Array<IResistance>;\r\n}\r\n\r\nexport type IAbility = {\r\n    name: string;\r\n    text: string;\r\n    type: string;\r\n}\r\n\r\nexport type IAttack = {\r\n    cost: string[];\r\n    name: string;\r\n    text: string;\r\n    damage: string;\r\n    convertedEnergyCost: string;\r\n}\r\n\r\nexport type IResistance =  {\r\n    type: string;\r\n    value: string;\r\n}\r\n\r\nexport type IWeakness =  {\r\n    type: string;\r\n    value: string;\r\n}","\r\nconst initialState = {\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n//AC\r\n\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppIsInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\n\r\n//Types\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppIsInitializedAC>\r\n\r\n\r\ntype InitialStateType = typeof initialState","import {FormikErrorType} from \"./Login\"\r\nimport {Dispatch} from \"redux\"\r\nimport {authApi} from \"../../api/pokemon-api\"\r\nimport {setAppErrorAC, setAppIsInitializedAC} from \"../../app/app-reducer\"\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isConfirm: false,\r\n}\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'APP/SET-IS-CONFIRMED':\r\n            return {...state, isConfirm: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//AC\r\n\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\nexport const setAppIsConfirmedAC = (value: boolean) => ({type: 'APP/SET-IS-CONFIRMED', value} as const)\r\n\r\n\r\n//thunks\r\n\r\n\r\nexport const loginTC = (data: FormikErrorType) => (dispatch: Dispatch) => {\r\n    authApi.login_mock(data)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            localStorage.setItem('isLoggedIn', JSON.stringify(true))\r\n        }).catch(err => {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    })\r\n}\r\n\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    authApi.logout__mock()\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppIsConfirmedAC(false))\r\n            localStorage.setItem('isLoggedIn', JSON.stringify(false))\r\n            localStorage.setItem('currentPage', JSON.stringify(1))\r\n            localStorage.setItem('TypeValue', '')\r\n            localStorage.setItem('SubtypeValue', '')\r\n        })\r\n}\r\n\r\n\r\nexport const confirmTC = (data: FormikErrorType) => (dispatch: Dispatch) => {\r\n    authApi.confirm_mock(data)\r\n        .then(res => {\r\n            dispatch(setAppIsConfirmedAC(true))\r\n        }).catch(err => {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    })\r\n}\r\n\r\n\r\n//types\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setAppIsConfirmedAC>\r\n\r\n\r\ntype InitialStateType = typeof initialState","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from \"../app/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport styles from './PasswordConfirmation.module.css'\r\nimport {Input} from \"../../components/Input/Input\"\r\nimport {Button} from \"../../components/Button/Button\"\r\nimport CustomizedSnackbars from \"../../utils/smsAlert\"\r\nimport {useFormik} from \"formik\"\r\nimport {confirmTC} from \"../Login/auth-reducer\"\r\nimport {FormikErrorType} from \"../Login/Login\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {ErrorSnackbar} from \"../../utils/ErrorSnackbar\"\r\n\r\n\r\n\r\n\r\nexport const PasswordConfirmation = () => {\r\n\r\n\r\n    const isConfirm = useSelector<AppRootStateType, boolean>(state => state.auth.isConfirm)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n           code: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.code) {\r\n                errors.login = '';\r\n            }\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(confirmTC(values))\r\n        },\r\n    })\r\n\r\n\r\n    if (isConfirm) {\r\n        return <Redirect to={'/main'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.wrap}>\r\n                {isInitialized && <ErrorSnackbar/>}\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <Input title={'Code from SMS'}\r\n                           type={'text'}\r\n                           name={'code'}\r\n                           formikProps={{...formik.getFieldProps('code')}}\r\n                    />\r\n                    <Button/>\r\n                </form>\r\n            </div>\r\n            <CustomizedSnackbars/>\r\n        </>\r\n    )\r\n}","import {Dispatch} from \"redux\"\r\nimport {CardType, pokemonApi} from \"../../api/pokemon-api\"\r\nimport {setAppErrorAC, setAppIsInitializedAC} from \"../../app/app-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardType>,\r\n    types: [] as Array<string>,\r\n    subtypes: [] as Array<string>,\r\n    filterTypeValue: '',\r\n    filterSubtypeValue: '',\r\n    popupMode: false,\r\n    popupSrc: '',\r\n    totalCount: 0,\r\n    page: 1\r\n}\r\n\r\n\r\nexport const mainReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"MAIN/SET-CARDS\":\r\n            return {...state, cards: action.cards}\r\n        case 'MAIN/SET-TYPES':\r\n            return {...state, types: action.types}\r\n        case 'MAIN/SET-SUBTYPES':\r\n            return {...state, subtypes: action.subtypes}\r\n        case 'MAIN/SET-TYPE-FILTER':\r\n            return {...state, filterTypeValue: action.filterTypeValue}\r\n        case 'MAIN/SET-SUBTYPE-FILTER':\r\n            return {...state, filterSubtypeValue: action.filterSubtypeValue}\r\n        case 'MAIN/SET-SUPERTYPE-FILTER':\r\n            return {...state, filterSubtypeValue: action.filterSupertypeValue}\r\n        case 'MAIN/SET-POPUP-MODE':\r\n            return {...state, popupMode: !state.popupMode}\r\n        case 'MAIN/SET-POPUP-SRC':\r\n            return {...state, popupSrc: action.popupSrcValue}\r\n        case 'MAIN/SET-TOTAL-COUNT':\r\n            return {...state, totalCount: action.count}\r\n        case 'MAIN/SET-PAGE':\r\n            return {...state, page: action.page}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//AC\r\n\r\n\r\nexport const setCardsAC = (cards: Array<CardType>) => ({type: 'MAIN/SET-CARDS', cards} as const)\r\nexport const setTypesAC = (types: Array<string>) => ({type: 'MAIN/SET-TYPES', types} as const)\r\nexport const setSubTypesAC = (subtypes: Array<string>) => ({type: 'MAIN/SET-SUBTYPES', subtypes} as const)\r\nexport const setTypeFilterAC = (filterTypeValue: string) => ({type: 'MAIN/SET-TYPE-FILTER', filterTypeValue} as const)\r\nexport const setSubtypeFilterAC = (filterSubtypeValue: string) => ({\r\n    type: 'MAIN/SET-SUBTYPE-FILTER',\r\n    filterSubtypeValue\r\n} as const)\r\nexport const setSupertypeFilterAC = (filterSupertypeValue: string) => ({\r\n    type: 'MAIN/SET-SUPERTYPE-FILTER',\r\n    filterSupertypeValue\r\n} as const)\r\nexport const setPopupModeAC = () => ({type: 'MAIN/SET-POPUP-MODE'} as const)\r\nexport const setPopupSrcAC = (popupSrcValue: string) => ({type: 'MAIN/SET-POPUP-SRC', popupSrcValue} as const)\r\nexport const setTotalCountAC = (count: number) => ({type: 'MAIN/SET-TOTAL-COUNT', count} as const)\r\nexport const setPageAC = (page: number) => ({type: 'MAIN/SET-PAGE', page} as const)\r\n\r\n\r\n//Thunks\r\n\r\n\r\nexport const fetchCardsTC = () => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    let state = getState().main\r\n    let page = state.page\r\n    let types = state.filterTypeValue\r\n    let subtype = state.filterSubtypeValue\r\n    try {\r\n        let res = await pokemonApi.getCards(page, types, subtype)\r\n        dispatch(setCardsAC(res.data.cards))\r\n        dispatch(setTotalCountAC(res.headers['total-count']))\r\n    } catch (err) {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    }\r\n}\r\n\r\n\r\nexport const getTypesTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        let res = await pokemonApi.getTypes()\r\n        dispatch(setTypesAC(res.data.types))\r\n    } catch (err) {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    }\r\n}\r\n\r\n\r\nexport const getSubTypesTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        let res = await pokemonApi.getSubTypes()\r\n        dispatch(setSubTypesAC(res.data.subtypes))\r\n    } catch (err) {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    }\r\n}\r\n\r\n\r\n//Types\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setTypesAC>\r\n    | ReturnType<typeof setSubTypesAC>\r\n    | ReturnType<typeof setTypeFilterAC>\r\n    | ReturnType<typeof setSubtypeFilterAC>\r\n    | ReturnType<typeof setSupertypeFilterAC>\r\n    | ReturnType<typeof setPopupModeAC>\r\n    | ReturnType<typeof setPopupSrcAC>\r\n    | ReturnType<typeof setTotalCountAC>\r\n    | ReturnType<typeof setPageAC>\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\"\r\nimport {CardType, pokemonApi} from \"../../api/pokemon-api\"\r\nimport {setAppErrorAC, setAppIsInitializedAC} from \"../../app/app-reducer\"\r\n\r\n\r\nconst initialState = {\r\n    profileMode: false,\r\n    card: null as CardType | null\r\n}\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/SET-PROFILE-MODE':\r\n            return {...state, profileMode: action.value}\r\n        case 'PROFILE/GET-CARD':\r\n            return {...state, card: action.card}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//AC\r\n\r\n\r\nexport const setProfileModeAC = (value: boolean) => ({type: 'PROFILE/SET-PROFILE-MODE', value} as const)\r\nexport const getCardAC = (card: CardType | null) => ({type: 'PROFILE/GET-CARD', card} as const)\r\n\r\n\r\n//Thunks\r\n\r\n\r\nexport const fetchCardTC = (id: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let res = await pokemonApi.getCard(id)\r\n        dispatch(getCardAC(res.data.card))\r\n    } catch (err) {\r\n        dispatch(setAppIsInitializedAC(true))\r\n        dispatch(setAppErrorAC(err))\r\n    }\r\n}\r\n\r\n\r\n//Types\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setProfileModeAC>\r\n    | ReturnType<typeof getCardAC>\r\n\r\n\r\n\r\n","import React, {useCallback} from \"react\"\r\nimport styles from './PokemonCard.module.css'\r\nimport {useDispatch} from \"react-redux\"\r\nimport {setPopupModeAC, setPopupSrcAC} from \"../../pages/MainScreen/main-reducer\"\r\nimport {fetchCardTC, setProfileModeAC} from \"../../pages/PokemonProfile/profile-reducer\"\r\n\r\n\r\n\r\n\r\nexport const PokemonCard = (props: PropsType) => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    let popupHandler = useCallback(() => {\r\n        dispatch(setPopupModeAC())\r\n        dispatch(setPopupSrcAC(props.imageUrl))\r\n    }, [])\r\n\r\n\r\n    let profileHandler = useCallback(() => {\r\n        dispatch(setProfileModeAC(true))\r\n        localStorage.setItem('profileMode', JSON.stringify(true))\r\n        dispatch(fetchCardTC(props.id))\r\n        localStorage.setItem('profileId', props.id)\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <div className={styles.image}><img src={props.imageUrl} alt=\"#\"/></div>\r\n            <div>{props.name}</div>\r\n            <div>{props.artist}</div>\r\n            <div className={styles.buttons}>\r\n                <button onClick={popupHandler}>Quick view</button>\r\n                <button onClick={profileHandler}>Pokemon profile</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//Types\r\n\r\n\r\ntype PropsType = {\r\n    imageUrl: string\r\n    id: string\r\n    name: string | undefined\r\n    artist: string | undefined\r\n}","import React, {useCallback} from 'react'\r\nimport styles from './Popup.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {setPopupModeAC} from \"../../pages/MainScreen/main-reducer\"\r\n\r\n\r\n\r\n\r\nexport const Popup = () => {\r\n\r\n\r\n    const popupSrc = useSelector<AppRootStateType, string>(state => state.main.popupSrc)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const popupCloseHandler = useCallback(() => {\r\n        dispatch(setPopupModeAC())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={styles.wrap} onClick={popupCloseHandler}>\r\n            <button className={styles.close}>close</button>\r\n            <img src={popupSrc} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport classes from \"./Pagination.module.css\"\r\n\r\n\r\n\r\n\r\nconst Pagination: React.FC<PropsType> = ({currentPage, itemsOnPage, totalItems, changePageNumber}) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(totalItems / itemsOnPage)\r\n    let firstPage = currentPage - 2\r\n    let lastPage = currentPage + 2\r\n    let pages = []\r\n\r\n\r\n    if (firstPage <= 0) firstPage = 1\r\n    if (lastPage >= pagesCount) lastPage = pagesCount\r\n\r\n\r\n    for (let i = firstPage; i <= lastPage; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    const clickPrevButton = () => {\r\n        if (currentPage>1)  changePageNumber(currentPage - 1)\r\n    }\r\n\r\n\r\n    const clickNextButton = () => {\r\n        if (currentPage<pagesCount)  changePageNumber(currentPage + 1)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.pagination}>\r\n            <button className={classes.pagination__btn}\r\n                    disabled={currentPage===1}\r\n                    onClick={clickPrevButton}\r\n            >\r\n                «\r\n            </button>\r\n\r\n            <div className={classes.pagination__pages}>\r\n                {currentPage > 3 && <>\r\n                <button className={`${classes.pagination__btn} ${1 === currentPage ? classes.pagination__btn_active : \"\"}`}\r\n                     onClick={() => changePageNumber(1)}>{1}</button>\r\n                    <div className={classes.pagination__space}>...</div>\r\n                </>\r\n                }\r\n                {pages.map(pageN => <button key={pageN}\r\n                    className={`${classes.pagination__btn} ${pageN === currentPage ? classes.pagination__btn_active : \"\"}`}\r\n                    onClick={() => changePageNumber(pageN)}>{pageN}</button>)}\r\n                {currentPage < pagesCount - 4 && <>\r\n                    <div className={classes.pagination__space}>...</div>\r\n                    <button className={`${classes.pagination__btn} ${pagesCount === currentPage ? classes.pagination__btn_active : \"\"}`}\r\n                    onClick={() => changePageNumber(pagesCount)}>{pagesCount}</button>\r\n                </>}\r\n            </div>\r\n\r\n            <button className={classes.pagination__btn}\r\n                    disabled={currentPage===pagesCount}\r\n                    onClick={clickNextButton}\r\n            >\r\n                »\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Pagination\r\n\r\n\r\n//Types\r\n\r\n\r\ntype PropsType = {\r\n    totalItems: number\r\n    itemsOnPage: number\r\n    currentPage: number\r\n    changePageNumber: (page: number) => void\r\n}\r\n","import React, {ChangeEvent, useCallback, useEffect} from \"react\"\r\nimport styles from './MainScreen.module.css'\r\nimport {PokemonCard} from \"../../components/PokemonCard/PokemonCard\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    fetchCardsTC,\r\n    getSubTypesTC,\r\n    getTypesTC, setPageAC,\r\n    setSubtypeFilterAC,\r\n    setTypeFilterAC\r\n} from \"./main-reducer\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {CardType} from \"../../api/pokemon-api\"\r\nimport {Redirect} from 'react-router-dom'\r\nimport {logoutTC} from \"../Login/auth-reducer\"\r\nimport {Popup} from \"../../components/Popup/Popup\"\r\nimport Pagination from \"../../components/Pagination/Pagination\"\r\n\r\n\r\n\r\n\r\nexport const MainScreen = () => {\r\n\r\n\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.main.cards)\r\n    const types = useSelector<AppRootStateType, Array<string>>(state => state.main.types)\r\n    const subtypes = useSelector<AppRootStateType, Array<string>>(state => state.main.subtypes)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const profileMode = useSelector<AppRootStateType, boolean>(state => state.profile.profileMode)\r\n    const filterTypeValue = useSelector<AppRootStateType, string>(state => state.main.filterTypeValue)\r\n    const filterSubtypeValue = useSelector<AppRootStateType, string>(state => state.main.filterSubtypeValue)\r\n    const popupMode = useSelector<AppRootStateType, boolean>(state => state.main.popupMode)\r\n    const totalCount = useSelector<AppRootStateType, number>(state => state.main.totalCount)\r\n    const page = useSelector<AppRootStateType, number>(state => state.main.page)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC())\r\n        dispatch(getTypesTC())\r\n        dispatch(getSubTypesTC())\r\n    }, [])\r\n\r\n\r\n    useEffect( ()=> {\r\n        let type = localStorage.getItem('TypeValue')\r\n        dispatch(setTypeFilterAC(type || ''))\r\n        let subtype = localStorage.getItem('SubtypeValue')\r\n        dispatch(setSubtypeFilterAC(subtype || ''))\r\n        let pageNumber = Number(localStorage.getItem('currentPage'))\r\n        dispatch(setPageAC(pageNumber))\r\n    },[] )\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC())\r\n    }, [page, filterTypeValue, filterSubtypeValue])\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    const selectTypeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        let newValue = e.currentTarget.value\r\n        dispatch(setTypeFilterAC(newValue))\r\n        localStorage.setItem('TypeValue', newValue)\r\n    }\r\n\r\n\r\n    const selectSubtypeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        let newValue = e.currentTarget.value\r\n        dispatch(setSubtypeFilterAC(newValue))\r\n        localStorage.setItem('SubtypeValue', newValue)\r\n    }\r\n\r\n\r\n    const changePageNumber = useCallback((page: number) => {\r\n        dispatch(setPageAC(page))\r\n        localStorage.setItem('currentPage', page.toString() )\r\n    }, [])\r\n\r\n\r\n    if (profileMode) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    let finalCards = cards.map(card => {\r\n        {\r\n            return (\r\n                <PokemonCard\r\n                    id={card.id}\r\n                    imageUrl={card.imageUrl}\r\n                    name={card.name}\r\n                    artist={card.artist}\r\n                    key={card.id}\r\n                />\r\n            )\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            {popupMode && <Popup/>}\r\n            <div className={styles.mainBar}>\r\n                <button onClick={logoutHandler}>Logout</button>\r\n            </div>\r\n            <div className={styles.mainContent}>\r\n                <div className={styles.selectsBar}>\r\n                    <select className={styles.types} onChange={selectTypeHandler} value={filterTypeValue}>\r\n                        {\r\n                            types.map(type => <option key={type}>{type}</option>)\r\n                        }\r\n                    </select>\r\n                    <select className={styles.subtypes} onChange={selectSubtypeHandler} value={filterSubtypeValue}>\r\n                        {\r\n                            subtypes.map(subtype => <option key={subtype} >{subtype}</option>)\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div className={styles.cards}>\r\n                    <div className={styles.cardsItems}>\r\n                        {\r\n                            finalCards\r\n                        }\r\n                    </div>\r\n                     <Pagination\r\n                        changePageNumber={changePageNumber}\r\n                        currentPage={page}\r\n                        itemsOnPage={4}\r\n                        totalItems={totalCount}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            '& > * + *': {\r\n                marginLeft: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function CircularIndeterminate() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <CircularProgress />\r\n            </div>\r\n    );\r\n}","import React, {useCallback, useEffect} from \"react\"\r\nimport styles from './PokemonProfile.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {fetchCardTC, getCardAC, setProfileModeAC} from \"./profile-reducer\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {logoutTC} from \"../Login/auth-reducer\"\r\nimport CircularIndeterminate from \"../../utils/Loader\"\r\nimport {CardType} from \"../../api/pokemon-api\"\r\nimport {ErrorSnackbar} from \"../../utils/ErrorSnackbar\";\r\n\r\n\r\nexport const PokemonProfile = () => {\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const card = useSelector<AppRootStateType, CardType | null>(state => state.profile.card)\r\n    const profileMode = useSelector<AppRootStateType, boolean>(state => state.profile.profileMode)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        let id = localStorage.getItem('profileId')\r\n        dispatch(fetchCardTC(id || ''))\r\n    },[])\r\n\r\n\r\n    const onBackHandler = () => {\r\n        dispatch(getCardAC(null))\r\n        dispatch(setProfileModeAC(false))\r\n        localStorage.setItem('profileMode', JSON.stringify(false))\r\n    }\r\n\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n\r\n    if (!profileMode) {\r\n        return <Redirect to={'/main'}/>\r\n    }\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        dispatch(setProfileModeAC(!profileMode))\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    if (!card) {\r\n        return <CircularIndeterminate/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div key={card.id} className={styles.wrap}>\r\n            {isInitialized && <ErrorSnackbar/>}\r\n            <div className={styles.profileBar}>\r\n                <button onClick={onBackHandler}>Back</button>\r\n                <button onClick={logoutHandler}>Logout</button>\r\n            </div>\r\n            <div className={styles.profileContent}>\r\n                <div className={styles.profileContent__image}>\r\n                    <img src={card.imageUrlHiRes} alt=\"\"/>\r\n                    <span>\r\n                        {card.attacks[0] ?  card.attacks[0].text : 'No description'}\r\n                   </span>\r\n                </div>\r\n                <div className={styles.profileContent__description}>\r\n                    <div className={styles.description__name}>\r\n                        <div>Pokemon name: <span className={styles.bold}>{card.name}</span></div>\r\n                        <div>Type: <span className={styles.bold}>{card.types[0]}</span></div>\r\n                        <div>SubType: <span className={styles.bold}>{card.subtype}</span></div>\r\n                    </div>\r\n                    <div className={styles.description__char}>\r\n                        <div>attackDamage: <span className={styles.bold}>{card.attacks[0] ? card.attacks[0].damage : 'No data'}</span></div>\r\n                        <div>attackCost: <span className={styles.bold}>{card.attacks[0] ? card.attacks[0].cost : 'No data'}</span></div>\r\n                        <div>resistances: type: {card.resistances ? <span className={styles.bold}>{card.resistances[0].type}</span> : <span className={styles.bold}>No data</span>} value: {card.resistances ? <span className={styles.bold}>{card.resistances[0].value}</span> : <span className={styles.bold}>No data</span>} </div>\r\n                        <div>evolvesFrom: {card.evolvesFrom ? <span className={styles.bold}>{card.evolvesFrom}</span> : <span className={styles.bold}>No data</span>}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport styles from './Login.module.css'\r\nimport {Input} from \"../../components/Input/Input\"\r\nimport {Button} from \"../../components/Button/Button\"\r\nimport {useFormik} from \"formik\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {loginTC} from \"./auth-reducer\"\r\nimport {Redirect} from 'react-router-dom'\r\nimport {ErrorSnackbar} from \"../../utils/ErrorSnackbar\"\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            login: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.login) {\r\n                errors.login = 'Required field';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required field';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/confirmation'}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.login_wrap}>\r\n            {isInitialized && <ErrorSnackbar/>}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input title={'Login'}\r\n                       type={'text'}\r\n                       name={'login'}\r\n                       formikProps={{...formik.getFieldProps('login')}}\r\n                />\r\n                {formik.errors.login ? <div>{formik.errors.login}</div> : null}\r\n                <Input title={'Password'}\r\n                       type={'password'}\r\n                       name={'password'}\r\n                       formikProps={{...formik.getFieldProps('password')}}\r\n                />\r\n                {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                <Button/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//Types\r\n\r\n\r\nexport type FormikErrorType = {\r\n    login?: string\r\n    password?: string\r\n    code?: string\r\n}","import React from 'react'\r\nimport styles from './PageNotFound.module.css'\r\n\r\n\r\n\r\n\r\nexport const PageNotFound = () => {\r\n    return (\r\n        <div className={styles.wrap}>\r\n         Sorry, the page was not found :(\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect} from 'react'\nimport './App.css'\nimport {PasswordConfirmation} from \"../pages/PasswordСonfirmation/PasswordСonfirmation\"\nimport {MainScreen} from \"../pages/MainScreen/MainScreen\"\nimport {PokemonProfile} from \"../pages/PokemonProfile/PokemonProfile\"\nimport {Login} from \"../pages/Login/Login\"\nimport {Switch, Route} from 'react-router-dom'\nimport {useDispatch} from \"react-redux\"\nimport {setAppIsConfirmedAC, setIsLoggedInAC} from \"../pages/Login/auth-reducer\"\nimport {setProfileModeAC} from \"../pages/PokemonProfile/profile-reducer\"\nimport {PageNotFound} from \"../pages/PageNotFound/PageNotFound\"\n\n\nfunction App() {\n\n\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        let isLoggedIn = localStorage.getItem('isLoggedIn')\n        if (isLoggedIn === 'true') {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppIsConfirmedAC(true))\n        }\n    }, [])\n\n\n    useEffect(() => {\n        let isProfileModeIn = localStorage.getItem('profileMode')\n        if (isProfileModeIn === 'true') {\n            dispatch(setProfileModeAC(true))\n        }\n    }, [])\n\n\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path={'/'} render={() => <Login/>}/>\n                <Route path={'/confirmation'} render={() => <PasswordConfirmation/>}/>\n                <Route path={'/main'} render={() => <MainScreen/>}/>\n                <Route path={'/profile'} render={() => <PokemonProfile/>}/>\n                <Route path={'*'} render={() => <PageNotFound/>}/>\n            </Switch>\n        </div>\n    )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"../pages/Login/auth-reducer\"\r\nimport {appReducer} from \"./app-reducer\"\r\nimport {mainReducer} from \"../pages/MainScreen/main-reducer\"\r\nimport {profileReducer} from \"../pages/PokemonProfile/profile-reducer\"\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    main: mainReducer,\r\n    profile: profileReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__1eiOl\",\"pagination__pages\":\"Pagination_pagination__pages__LUIXG\",\"pagination__btn\":\"Pagination_pagination__btn__COllI\",\"pagination__btn_active\":\"Pagination_pagination__btn_active__26-zc\",\"pagination__space\":\"Pagination_pagination__space__29h3i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"MainScreen_wrap__1H_za\",\"mainBar\":\"MainScreen_mainBar__3qFFQ\",\"mainContent\":\"MainScreen_mainContent__x2Uug\",\"selectsBar\":\"MainScreen_selectsBar__1bafh\",\"types\":\"MainScreen_types__wagow\",\"subtypes\":\"MainScreen_subtypes__R3W4V\",\"cards\":\"MainScreen_cards__VkSKV\",\"cardsItems\":\"MainScreen_cardsItems__FARji\",\"first\":\"MainScreen_first__3StwW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PokemonCard_wrap__2J18n\",\"image\":\"PokemonCard_image__3ZV_t\",\"buttons\":\"PokemonCard_buttons__ov8_5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Popup_wrap__3XPNh\",\"close\":\"Popup_close__13XKD\",\"hide\":\"Popup_hide__2OshW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PasswordConfirmation_wrap__2LmI8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_area\":\"Input_input_area__Sxqvv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__6WJdf\"};","module.exports = __webpack_public_path__ + \"static/media/go.6b4ffa55.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_wrap\":\"Login_login_wrap__1fydi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PageNotFound_wrap__y_3YH\"};"],"sourceRoot":""}